(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1960],{43036:function(e,n,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/q/dynamic-css-styles",function(){return s(26428)}])},26428:function(e,n,s){"use strict";s.r(n),s.d(n,{default:function(){return d},meta:function(){return a}});var o=s(85893),t=s(25190),r=s(37141);let a={title:"How can I add dynamic CSS styles?",description:"Use data attributes, CSS variables or inline styles",slug:"dynamic-css-styles",category:"styles",tags:["dynamic","CSS","styles"],created_at:"January 4, 2024",last_updated_at:"January 4, 2024"},i=(0,r.A)(a);function l(e){let n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"data--attributes",children:"data- attributes"}),"\n",(0,o.jsxs)(n.p,{children:["If the value that controls dynamic styles is a boolean or a known small union of values,\nuse ",(0,o.jsx)(n.a,{href:"https://mantine.dev/styles/data-attributes/",children:"data- attributes"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"First, define data- attributes on the component. In the example below:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"data-disabled"})," represents boolean ",(0,o.jsx)(n.code,{children:"disabled"})," attribute. ",(0,o.jsx)(n.code,{children:"disabled || undefined"})," is required\nto not add ",(0,o.jsx)(n.code,{children:'data-disabled="false"'})," attribute when ",(0,o.jsx)(n.code,{children:"disabled"})," is ",(0,o.jsx)(n.code,{children:"false"})," and allow styling with ",(0,o.jsx)(n.code,{children:"&[data-disabled]"})," selector."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"data-orientation"})," represents ",(0,o.jsx)(n.code,{children:"orientation"})," prop which can be either ",(0,o.jsx)(n.code,{children:"horizontal"})," or ",(0,o.jsx)(n.code,{children:"vertical"}),".\nIn styles you can reference it with ",(0,o.jsx)(n.code,{children:'&[data-orientation="horizontal"]'})," selector."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { Box } from '@mantine/core';\nimport classes from './Demo.module.css';\n\ninterface DemoProps {\n  disabled: boolean;\n  orientation: 'horizontal' | 'vertical';\n}\n\nfunction Demo({ disabled, orientation }: DemoProps) {\n  return (\n    <Box\n      data-disabled={disabled || undefined}\n      data-orientation={orientation}\n      className={classes.root}\n    >\n      My demo\n    </Box>\n  );\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Then add styles in ",(0,o.jsx)(n.code,{children:".module.css"})," file:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scss",children:".root {\n  background: orange;\n  display: flex;\n\n  &[data-disabled] {\n    background: silver;\n  }\n\n  &[data-orientation='horizontal'] {\n    flex-direction: row;\n  }\n\n  &[data-orientation='vertical'] {\n    flex-direction: column;\n  }\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"inline-styles",children:"Inline styles"}),"\n",(0,o.jsxs)(n.p,{children:["If the value that controls dynamic styles is not represented by a known union\nof values (for example, value can be any valid CSS color), then you can use\ninline styles or ",(0,o.jsx)(n.a,{href:"https://mantine.dev/styles/style-props/",children:"style props"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { Box } from '@mantine/core';\n\ninterface DemoProps {\n  fontFamily: string;\n  color: string;\n}\n\nfunction Demo({ fontFamily, color }: DemoProps) {\n  return (\n    <Box style={{ backgroundColor: color }} ff={fontFamily}>\n      My demo\n    </Box>\n  );\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["If you need to customize a deeply nested element, use ",(0,o.jsx)(n.a,{href:"https://mantine.dev/styles/styles-api/#styles-prop",children:"styles"}),"\nprop instead:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { Button } from '@mantine/core';\n\ninterface DemoProps {\n  color: string;\n}\n\nfunction Demo({ color }: DemoProps) {\n  return (\n    <Button styles={{ label: { backgroundColor: color } }}>\n      My demo\n    </Button>\n  );\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Note that, it is not possible use pseudo-classes (for example, ",(0,o.jsx)(n.code,{children:":hover"}),", ",(0,o.jsx)(n.code,{children:":first-of-type"}),")\nand media queries inside the ",(0,o.jsx)(n.code,{children:"styles"})," prop. For this purpose, use CSS variables\nwith ",(0,o.jsx)(n.a,{href:"https://mantine.dev/styles/styles-api/#classnames-prop",children:"classNames"})," prop."]}),"\n",(0,o.jsx)(n.h2,{id:"css-variables",children:"CSS variables"}),"\n",(0,o.jsxs)(n.p,{children:["If none of the methods above works for you (for example, you want to customize, ",(0,o.jsx)(n.code,{children:":hover"}),"\nstyles based on component prop), use CSS variables\nwith ",(0,o.jsx)(n.a,{href:"https://mantine.dev/styles/styles-api/#classnames-prop",children:"classNames"})," prop."]}),"\n",(0,o.jsxs)(n.p,{children:["First, define CSS variables in ",(0,o.jsx)(n.code,{children:"style"})," or ",(0,o.jsx)(n.code,{children:"styles"})," prop:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { Box } from '@mantine/core';\nimport classes from './Demo.module.css';\n\ninterface DemoProps {\n  color: string;\n}\n\nfunction Demo({ color }: DemoProps) {\n  return (\n    <Box style={{ '--demo-hover': color }} className={classes.root}>\n      My demo\n    </Box>\n  );\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Then reference them in ",(0,o.jsx)(n.code,{children:".module.css"})," file:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scss",children:".root {\n  background: orange;\n\n  &:hover {\n    background: var(--demo-hover);\n  }\n}\n"})})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,o.jsx)(i,{...e,children:(0,o.jsx)(l,{...e})})}}},function(e){e.O(0,[3671,3455,9774,2888,179],function(){return e(e.s=43036)}),_N_E=e.O()}]);